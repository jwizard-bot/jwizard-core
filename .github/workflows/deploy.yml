name: Build and deploy JWizard CORE

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/deploy.yml"
      - "jwc-*/**"
      - ".dockerignore"
      - "Dockerfile.pipeline"
      - "build.gradle"
      - "gradle.properties"
      - "settings.gradle"
  workflow_dispatch:

env:
  PM2_CORE_NAME_INSTANCE_1: JWizardCore1
  PM2_CORE_NAME_INSTANCE_2: JWizardCore2
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Determinate build version
        id: version
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew clean test --no-daemon
        env:
          JWIZARD_VERSION: ${{ steps.version.outputs.sha_short }}
          JWIZARD_MAVEN_NAME: ${{ secrets.MVN_LIB_READER_NAME }}
          JWIZARD_MAVEN_SECRET: ${{ secrets.MVN_LIB_READER_SECRET }}

      - name: Package to JAR
        run: ./gradlew clean shadowJar --no-daemon
        env:
          JWIZARD_VERSION: ${{ steps.version.outputs.sha_short }}
          JWIZARD_MAVEN_NAME: ${{ secrets.MVN_LIB_READER_NAME }}
          JWIZARD_MAVEN_SECRET: ${{ secrets.MVN_LIB_READER_SECRET }}

      - name: Upload generated JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-jar
          path: .bin/jwizard-core.jar
          retention-days: 1

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: output-jar
          path: ${{ github.workspace }}/docker

      - name: Set up builder
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.pipeline
          push: true
          tags: milosz08/jwizard-core:latest

      - name: Logout from Docker Hub
        run: docker logout

  migrate-and-deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout tools repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/jwizard-tools
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: output-jar
          path: bin

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Grand permissions
        run: chmod +x exec/run-with-config

      - name: Run migrator
        run: exec/run-with-config db_migrator \
          "${{ secrets.CONFIG_FILE_CONTENT }}" \
          --pipeline infra

      - name: Cache version
        run: exec/run-with-config cache_version \
          "${{ secrets.CONFIG_FILE_CONTENT }}" \
          --repo ${{ github.repository }}

      - name: Run remote invoker
        run: exec/run-with-config remote_invoker \
          "${{ secrets.CONFIG_FILE_CONTENT }}" \
          --name core  \
          --inputDir ${{ github.workspace }}/bin
        env:
          JWIZARD_SSH_HOST: ${{ secrets.SSH_HOST }}
          JWIZARD_SSH_PORT: ${{ secrets.SSH_PORT }}
          JWIZARD_SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          JWIZARD_SSH_KEY: ${{ secrets.SSH_KEY }}
          JWIZARD_SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          JWIZARD_SSH_OUTPUT_PATH_PREFIX: ${{ secrets.SSH_OUTPUT_PATH_PREFIX }}
          JWIZARD_APP_CONFIG_FILE_CONTENT: ${{ secrets.APP_CONFIG_FILE_CONTENT }}
