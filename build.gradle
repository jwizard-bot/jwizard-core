plugins {
	alias libs.plugins.kotlinJvm
	alias libs.plugins.kotlinSerialization
	alias libs.plugins.kotlinSpring apply false
	alias libs.plugins.shadowJar apply false
}

def projectVersion = getEnv('VERSION', 'latest')

ext {
	jvmSpecification = 17
	initProjectName = 'jwc-app'
}

allprojects {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url = uri('https://m2.dv8tion.net/releases') }
		maven { url = uri('https://jitpack.io') }
		maven {
			url = uri('https://m2.miloszgilga.pl/private')
			credentials {
				username = getEnv('MAVEN_NAME')
				password = getEnv('MAVEN_SECRET')
			}
		}
	}
	group = 'pl.jwizard'
	version = projectVersion
}

subprojects {
	apply plugin: getPluginId(libs.plugins.kotlinJvm)
	apply plugin: getPluginId(libs.plugins.kotlinSpring)

	if (project.name != rootProject.ext.initProjectName) {
		apply plugin: 'java-library'
	}

	java {
		sourceCompatibility = rootProject.ext.jvmSpecification
		targetCompatibility = rootProject.ext.jvmSpecification
	}

	dependencies {
		implementation libs.jwizardLib
		implementation libs.kotlin
		implementation libs.kotlinReflect
		implementation libs.logbackCore
		implementation libs.logbackClassic
		implementation libs.slf4jApi

		testImplementation libs.junitJupiter
		testImplementation libs.junitJupiterEngine
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "passed", "skipped", "failed"
		}
	}

	compileKotlin {
		kotlinOptions {
			jvmTarget = rootProject.ext.jvmSpecification.toString()
			freeCompilerArgs = [
				'-Xjsr305=strict',
			]
		}
	}

	configurations.configureEach {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}

project(":${rootProject.ext.initProjectName}") {
	apply plugin: getPluginId(libs.plugins.shadowJar)

	jar {
		manifest {
			attributes(
				'Main-Class': 'pl.jwizard.jwc.app.JWizardCoreEntrypointKt'
			)
		}
	}

	shadowJar {
		archiveBaseName = 'jwizard-core'
		archiveClassifier = ''
		archiveVersion = ''
		destinationDirectory = file("$rootDir/.bin")
	}
}

clean {
	doLast {
		def binDir = file("$projectDir/.bin")
		if (binDir.exists()) {
			binDir.deleteDir()
		}
	}
}

tasks.register('shadowJar') {
	dependsOn ":${rootProject.ext.initProjectName}:shadowJar"
}

// retrieves the value of an environment variable, with a fallback to a default value
static def getEnv(String name, Object defValue = '') {
	return System.getenv("JWIZARD_$name") ?: defValue.toString()
}

// gets the plugin ID from a given PluginDependency provider
static def getPluginId(Provider<PluginDependency> accessor) {
	return accessor.get().pluginId
}
